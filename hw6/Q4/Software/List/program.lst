
AVRASM ver. 2.1.30  E:\uni\microproc\hw6\04 ADC\Software\List\program.asm Wed Jan 26 21:04:12 2022

E:\uni\microproc\hw6\04 ADC\Software\List\program.asm(1088): warning: Register r5 already defined by the .DEF directive
E:\uni\microproc\hw6\04 ADC\Software\List\program.asm(1089): warning: Register r4 already defined by the .DEF directive
E:\uni\microproc\hw6\04 ADC\Software\List\program.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0040 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 7548
000034 696d
000035 6964
000036 7974      	.DB  0x48,0x75,0x6D,0x69,0x64,0x69,0x74,0x79
000037 253a
000038 2064
000039 2525
00003a 0020      	.DB  0x3A,0x25,0x64,0x20,0x25,0x25,0x20,0x0
                 _0x2000003:
00003b c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003c 0002      	.DW  0x02
00003d 0260      	.DW  __base_y_G100
00003e 0076      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00003f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000040 94f8      	CLI
000041 27ee      	CLR  R30
000042 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000043 e0f1      	LDI  R31,1
000044 bffb      	OUT  GICR,R31
000045 bfeb      	OUT  GICR,R30
000046 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000047 e1f8      	LDI  R31,0x18
000048 bdf1      	OUT  WDTCR,R31
000049 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00004a e08d      	LDI  R24,(14-2)+1
00004b e0a2      	LDI  R26,2
00004c 27bb      	CLR  R27
                 __CLEAR_REG:
00004d 93ed      	ST   X+,R30
00004e 958a      	DEC  R24
00004f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000050 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000051 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000052 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000053 93ed      	ST   X+,R30
000054 9701      	SBIW R24,1
000055 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000056 e7e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000057 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000058 9185      	LPM  R24,Z+
000059 9195      	LPM  R25,Z+
00005a 9700      	SBIW R24,0
00005b f061      	BREQ __GLOBAL_INI_END
00005c 91a5      	LPM  R26,Z+
00005d 91b5      	LPM  R27,Z+
00005e 9005      	LPM  R0,Z+
00005f 9015      	LPM  R1,Z+
000060 01bf      	MOVW R22,R30
000061 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000062 9005      	LPM  R0,Z+
000063 920d      	ST   X+,R0
000064 9701      	SBIW R24,1
000065 f7e1      	BRNE __GLOBAL_INI_LOOP
000066 01fb      	MOVW R30,R22
000067 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000068 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000069 bfed      	OUT  SPL,R30
00006a e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006d e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006e 940c 00a5 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;void request(void)
                 ; 0000 0007 {
                 
                 	.CSEG
                 _request:
                 ; .FSTART _request
                 ; 0000 0008     DDRD = 0x01;
000070 e0e1      	LDI  R30,LOW(1)
000071 bbe1      	OUT  0x11,R30
                 ; 0000 0009     PORTD.0 = 0;  //changing it means send me sth
000072 9890      	CBI  0x12,0
                 ; 0000 000A     delay_ms(100);
000073 e6a4      	LDI  R26,LOW(100)
000074 e0b0      	LDI  R27,0
000075 940e 0378 	CALL _delay_ms
                 ; 0000 000B     PORTD.0 = 1;
000077 9a90      	SBI  0x12,0
                 ; 0000 000C }
000078 9508      	RET
                 ; .FEND
                 ;
                 ;void response(void)
                 ; 0000 000F {
                 _response:
                 ; .FSTART _response
                 ; 0000 0010     DDRD = 0x00;
000079 e0e0      	LDI  R30,LOW(0)
00007a bbe1      	OUT  0x11,R30
                 ; 0000 0011     while(PIND.0 == 1);
                 _0x7:
00007b 9980      	SBIC 0x10,0
00007c cffe      	RJMP _0x7
                 ; 0000 0012     while(PIND.0 == 0);
                 _0xA:
00007d 9b80      	SBIS 0x10,0
00007e cffe      	RJMP _0xA
                 ; 0000 0013     while(PIND.0 == 1);
                 _0xD:
00007f 9980      	SBIC 0x10,0
000080 cffe      	RJMP _0xD
                 ; 0000 0014 }
000081 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char receive_data(void)
                 ; 0000 0017 {
                 _receive_data:
                 ; .FSTART _receive_data
                 ; 0000 0018     int counter_bit;
                 ; 0000 0019     int data = 0;
                 ; 0000 001A     for(counter_bit=0; counter_bit<8; counter_bit++)
000082 940e 0399 	CALL __SAVELOCR4
                 ;	counter_bit -> R16,R17
                 ;	data -> R18,R19
                +
000084 e020     +LDI R18 , LOW ( 0 )
000085 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000086 e000     +LDI R16 , LOW ( 0 )
000087 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x11:
                +
000088 3008     +CPI R16 , LOW ( 8 )
000089 e0e0     +LDI R30 , HIGH ( 8 )
00008a 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
00008b f4a4      	BRGE _0x12
                 ; 0000 001B     {
                 ; 0000 001C         while(PIND.0 == 0);
                 _0x13:
00008c 9b80      	SBIS 0x10,0
00008d cffe      	RJMP _0x13
                 ; 0000 001D         delay_us(50);
                +
00008e e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00008f 958a     +DEC R24
000090 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
                 ; 0000 001E         if(PIND.0==1)
000091 9b80      	SBIS 0x10,0
000092 c006      	RJMP _0x16
                 ; 0000 001F             data=(data<<1)|(0x01);
000093 01f9      	MOVW R30,R18
000094 0fee      	LSL  R30
000095 1fff      	ROL  R31
000096 60e1      	ORI  R30,1
000097 019f      	MOVW R18,R30
                 ; 0000 0020         else data=data<<1;
000098 c002      	RJMP _0x17
                 _0x16:
000099 0f22      	LSL  R18
00009a 1f33      	ROL  R19
                 ; 0000 0021         while(PIND.0==1);
                 _0x17:
                 _0x18:
00009b 9980      	SBIC 0x10,0
00009c cffe      	RJMP _0x18
                 ; 0000 0022     }
                +
00009d 5f0f     +SUBI R16 , LOW ( - 1 )
00009e 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00009f cfe8      	RJMP _0x11
                 _0x12:
                 ; 0000 0023     return data;
0000a0 2fe2      	MOV  R30,R18
0000a1 940e 03a0 	CALL __LOADLOCR4
0000a3 9624      	ADIW R28,4
0000a4 9508      	RET
                 ; 0000 0024 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0027 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0028     char lcd_message[16];
                 ; 0000 0029     char check_sum = 0, int_temperature = 0, int_humidity = 0, dec_temperature = 0, dec_humidity = 0;
                 ; 0000 002A 
                 ; 0000 002B     lcd_init(16);
0000a5 9760      	SBIW R28,16
                 ;	lcd_message -> Y+0
                 ;	check_sum -> R17
                 ;	int_temperature -> R16
                 ;	int_humidity -> R19
                 ;	dec_temperature -> R18
                 ;	dec_humidity -> R21
0000a6 e010      	LDI  R17,0
0000a7 e000      	LDI  R16,0
0000a8 e030      	LDI  R19,0
0000a9 e020      	LDI  R18,0
0000aa e050      	LDI  R21,0
0000ab e1a0      	LDI  R26,LOW(16)
0000ac d0a2      	RCALL _lcd_init
                 ; 0000 002C 
                 ; 0000 002D     // SET B0 TO OUTPUT
                 ; 0000 002E     DDRB = 0X01;
0000ad e0e1      	LDI  R30,LOW(1)
0000ae bbe7      	OUT  0x17,R30
                 ; 0000 002F     PORTB.0 = 0;
0000af 98c0      	CBI  0x18,0
                 ; 0000 0030 
                 ; 0000 0031     delay_ms(1000);
0000b0 eea8      	LDI  R26,LOW(1000)
0000b1 e0b3      	LDI  R27,HIGH(1000)
0000b2 940e 0378 	CALL _delay_ms
                 ; 0000 0032 
                 ; 0000 0033     while (1)
                 _0x1D:
                 ; 0000 0034     {
                 ; 0000 0035         request();
0000b4 dfbb      	RCALL _request
                 ; 0000 0036         response();
0000b5 dfc3      	RCALL _response
                 ; 0000 0037 
                 ; 0000 0038         int_humidity = receive_data();
0000b6 dfcb      	RCALL _receive_data
0000b7 2f3e      	MOV  R19,R30
                 ; 0000 0039         dec_humidity = receive_data();
0000b8 dfc9      	RCALL _receive_data
0000b9 2f5e      	MOV  R21,R30
                 ; 0000 003A         int_temperature = receive_data();
0000ba dfc7      	RCALL _receive_data
0000bb 2f0e      	MOV  R16,R30
                 ; 0000 003B         dec_temperature = receive_data();
0000bc dfc5      	RCALL _receive_data
0000bd 2f2e      	MOV  R18,R30
                 ; 0000 003C         check_sum = receive_data();
0000be dfc3      	RCALL _receive_data
0000bf 2f1e      	MOV  R17,R30
                 ; 0000 003D 
                 ; 0000 003E         if (int_temperature + dec_temperature + int_humidity + dec_humidity != check_sum)
0000c0 2fa0      	MOV  R26,R16
0000c1 27bb      	CLR  R27
0000c2 27ee      	CLR  R30
0000c3 0fa2      	ADD  R26,R18
0000c4 1fbe      	ADC  R27,R30
0000c5 27ee      	CLR  R30
0000c6 0fa3      	ADD  R26,R19
0000c7 1fbe      	ADC  R27,R30
0000c8 27ee      	CLR  R30
0000c9 0fa5      	ADD  R26,R21
0000ca 1fbe      	ADC  R27,R30
0000cb 2fe1      	MOV  R30,R17
0000cc e0f0      	LDI  R31,0
0000cd 17ea      	CP   R30,R26
0000ce 07fb      	CPC  R31,R27
0000cf f721      	BRNE _0x1D
                 ; 0000 003F             continue;
                 ; 0000 0040 
                 ; 0000 0041         sprintf(lcd_message,"Humidity:%d %% ",int_humidity);
0000d0 01fe      	MOVW R30,R28
0000d1 93fa      	ST   -Y,R31
0000d2 93ea      	ST   -Y,R30
                +
0000d3 e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000d4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000d5 93fa      	ST   -Y,R31
0000d6 93ea      	ST   -Y,R30
0000d7 2fe3      	MOV  R30,R19
0000d8 27ff      	CLR  R31
0000d9 2766      	CLR  R22
0000da 2777      	CLR  R23
0000db 940e 0392 	CALL __PUTPARD1
0000dd e084      	LDI  R24,4
0000de 940e 02f1 	CALL _sprintf
0000e0 9628      	ADIW R28,8
                 ; 0000 0042         lcd_gotoxy(0,0);
0000e1 e0e0      	LDI  R30,LOW(0)
0000e2 93ea      	ST   -Y,R30
0000e3 e0a0      	LDI  R26,LOW(0)
0000e4 d02b      	RCALL _lcd_gotoxy
                 ; 0000 0043         lcd_puts(lcd_message);
0000e5 01de      	MOVW R26,R28
0000e6 d057      	RCALL _lcd_puts
                 ; 0000 0044 
                 ; 0000 0045         if (int_humidity<40 || int_humidity>60)
0000e7 3238      	CPI  R19,40
0000e8 f010      	BRLO _0x22
0000e9 333d      	CPI  R19,61
0000ea f010      	BRLO _0x21
                 _0x22:
                 ; 0000 0046             PORTB.0 =1 ;
0000eb 9ac0      	SBI  0x18,0
                 ; 0000 0047         else PORTB.0 = 0;
0000ec c001      	RJMP _0x26
                 _0x21:
0000ed 98c0      	CBI  0x18,0
                 ; 0000 0048     }
                 _0x26:
0000ee cfc5      	RJMP _0x1D
                 ; 0000 0049 }
                 _0x29:
0000ef cfff      	RJMP _0x29
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000f0 93aa      	ST   -Y,R26
0000f1 b3e5      	IN   R30,0x15
0000f2 70ef      	ANDI R30,LOW(0xF)
0000f3 2fae      	MOV  R26,R30
0000f4 81e8      	LD   R30,Y
0000f5 7fe0      	ANDI R30,LOW(0xF0)
0000f6 2bea      	OR   R30,R26
0000f7 bbe5      	OUT  0x15,R30
                +
0000f8 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f9 958a     +DEC R24
0000fa f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000fb 9aaa      	SBI  0x15,2
                +
0000fc e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000fd 958a     +DEC R24
0000fe f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000ff 98aa      	CBI  0x15,2
                +
000100 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000101 958a     +DEC R24
000102 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000103 c077      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000104 93aa      	ST   -Y,R26
000105 81a8      	LD   R26,Y
000106 dfe9      	RCALL __lcd_write_nibble_G100
000107 81e8          ld    r30,y
000108 95e2          swap  r30
000109 83e8          st    y,r30
00010a 81a8      	LD   R26,Y
00010b dfe4      	RCALL __lcd_write_nibble_G100
                +
00010c e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00010d 958a     +DEC R24
00010e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00010f c06b      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000110 93aa      	ST   -Y,R26
000111 81e8      	LD   R30,Y
000112 e0f0      	LDI  R31,0
000113 5ae0      	SUBI R30,LOW(-__base_y_G100)
000114 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000115 81e0      	LD   R30,Z
000116 81a9      	LDD  R26,Y+1
000117 0fae      	ADD  R26,R30
000118 dfeb      	RCALL __lcd_write_data
000119 8059      	LDD  R5,Y+1
00011a 8048      	LDD  R4,Y+0
00011b 9622      	ADIW R28,2
00011c 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00011d e0a2      	LDI  R26,LOW(2)
00011e 940e 033e 	CALL SUBOPT_0x0
000120 e0ac      	LDI  R26,LOW(12)
000121 dfe2      	RCALL __lcd_write_data
000122 e0a1      	LDI  R26,LOW(1)
000123 940e 033e 	CALL SUBOPT_0x0
000125 e0e0      	LDI  R30,LOW(0)
000126 2e4e      	MOV  R4,R30
000127 2e5e      	MOV  R5,R30
000128 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000129 93aa      	ST   -Y,R26
00012a 81a8      	LD   R26,Y
00012b 30aa      	CPI  R26,LOW(0xA)
00012c f011      	BREQ _0x2000005
00012d 1457      	CP   R5,R7
00012e f048      	BRLO _0x2000004
                 _0x2000005:
00012f e0e0      	LDI  R30,LOW(0)
000130 93ea      	ST   -Y,R30
000131 9443      	INC  R4
000132 2da4      	MOV  R26,R4
000133 dfdc      	RCALL _lcd_gotoxy
000134 81a8      	LD   R26,Y
000135 30aa      	CPI  R26,LOW(0xA)
000136 f409      	BRNE _0x2000007
000137 c043      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
000138 9453      	INC  R5
000139 9aa8      	SBI  0x15,0
00013a 81a8      	LD   R26,Y
00013b dfc8      	RCALL __lcd_write_data
00013c 98a8      	CBI  0x15,0
00013d c03d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00013e 93ba      	ST   -Y,R27
00013f 93aa      	ST   -Y,R26
000140 931a      	ST   -Y,R17
                 _0x2000008:
000141 81a9      	LDD  R26,Y+1
000142 81ba      	LDD  R27,Y+1+1
000143 91ed      	LD   R30,X+
000144 83a9      	STD  Y+1,R26
000145 83ba      	STD  Y+1+1,R27
000146 2f1e      	MOV  R17,R30
000147 30e0      	CPI  R30,0
000148 f019      	BREQ _0x200000A
000149 2fa1      	MOV  R26,R17
00014a dfde      	RCALL _lcd_putchar
00014b cff5      	RJMP _0x2000008
                 _0x200000A:
00014c 8118      	LDD  R17,Y+0
00014d 9623      	ADIW R28,3
00014e 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00014f 93aa      	ST   -Y,R26
000150 b3e4      	IN   R30,0x14
000151 6fe0      	ORI  R30,LOW(0xF0)
000152 bbe4      	OUT  0x14,R30
000153 9aa2      	SBI  0x14,2
000154 9aa0      	SBI  0x14,0
000155 9aa1      	SBI  0x14,1
000156 98aa      	CBI  0x15,2
000157 98a8      	CBI  0x15,0
000158 98a9      	CBI  0x15,1
000159 8078      	LDD  R7,Y+0
00015a 81e8      	LD   R30,Y
00015b 58e0      	SUBI R30,-LOW(128)
                +
00015c 93e0 0262+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00015e 81e8      	LD   R30,Y
00015f 54e0      	SUBI R30,-LOW(192)
                +
000160 93e0 0263+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000162 e1a4      	LDI  R26,LOW(20)
000163 e0b0      	LDI  R27,0
000164 940e 0378 	CALL _delay_ms
000166 940e 0344 	CALL SUBOPT_0x1
000168 940e 0344 	CALL SUBOPT_0x1
00016a 940e 0344 	CALL SUBOPT_0x1
00016c e2a0      	LDI  R26,LOW(32)
00016d df82      	RCALL __lcd_write_nibble_G100
                +
00016e ec88     +LDI R24 , LOW ( 200 )
00016f e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000170 9701     +SBIW R24 , 1
000171 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000172 e2a8      	LDI  R26,LOW(40)
000173 df90      	RCALL __lcd_write_data
000174 e0a4      	LDI  R26,LOW(4)
000175 df8e      	RCALL __lcd_write_data
000176 e8a5      	LDI  R26,LOW(133)
000177 df8c      	RCALL __lcd_write_data
000178 e0a6      	LDI  R26,LOW(6)
000179 df8a      	RCALL __lcd_write_data
00017a dfa2      	RCALL _lcd_clear
                 _0x2080002:
00017b 9621      	ADIW R28,1
00017c 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
00017d 93ba      	ST   -Y,R27
00017e 93aa      	ST   -Y,R26
00017f 931a      	ST   -Y,R17
000180 930a      	ST   -Y,R16
000181 81aa      	LDD  R26,Y+2
000182 81bb      	LDD  R27,Y+2+1
000183 9612      	ADIW R26,2
000184 940e 038a 	CALL __GETW1P
000186 9730      	SBIW R30,0
000187 f159      	BREQ _0x2020010
000188 81aa      	LDD  R26,Y+2
000189 81bb      	LDD  R27,Y+2+1
00018a 9614      	ADIW R26,4
00018b 940e 038a 	CALL __GETW1P
00018d 018f      	MOVW R16,R30
00018e 9730      	SBIW R30,0
00018f f061      	BREQ _0x2020012
                +
000190 3002     +CPI R16 , LOW ( 2 )
000191 e0e0     +LDI R30 , HIGH ( 2 )
000192 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000193 f098      	BRLO _0x2020013
000194 01f8      	MOVW R30,R16
000195 9731      	SBIW R30,1
000196 018f      	MOVW R16,R30
                +
000197 81aa     +LDD R26 , Y + 2
000198 81bb     +LDD R27 , Y + 2 + 1
000199 9614     +ADIW R26 , 4
00019a 93ed     +ST X + , R30
00019b 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
00019c 81aa      	LDD  R26,Y+2
00019d 81bb      	LDD  R27,Y+2+1
00019e 9612      	ADIW R26,2
00019f 91ed      	LD   R30,X+
0001a0 91fd      	LD   R31,X+
0001a1 9631      	ADIW R30,1
0001a2 93fe      	ST   -X,R31
0001a3 93ee      	ST   -X,R30
0001a4 9731      	SBIW R30,1
0001a5 81ac      	LDD  R26,Y+4
0001a6 83a0      	STD  Z+0,R26
                 _0x2020013:
0001a7 81aa      	LDD  R26,Y+2
0001a8 81bb      	LDD  R27,Y+2+1
0001a9 940e 038a 	CALL __GETW1P
0001ab 23ff      	TST  R31
0001ac f02a      	BRMI _0x2020014
0001ad 91ed      	LD   R30,X+
0001ae 91fd      	LD   R31,X+
0001af 9631      	ADIW R30,1
0001b0 93fe      	ST   -X,R31
0001b1 93ee      	ST   -X,R30
                 _0x2020014:
0001b2 c006      	RJMP _0x2020015
                 _0x2020010:
0001b3 81aa      	LDD  R26,Y+2
0001b4 81bb      	LDD  R27,Y+2+1
0001b5 efef      	LDI  R30,LOW(65535)
0001b6 efff      	LDI  R31,HIGH(65535)
0001b7 93ed      	ST   X+,R30
0001b8 93fc      	ST   X,R31
                 _0x2020015:
0001b9 8119      	LDD  R17,Y+1
0001ba 8108      	LDD  R16,Y+0
0001bb 9625      	ADIW R28,5
0001bc 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0001bd 93ba      	ST   -Y,R27
0001be 93aa      	ST   -Y,R26
0001bf 9726      	SBIW R28,6
0001c0 940e 0397 	CALL __SAVELOCR6
0001c2 e010      	LDI  R17,0
0001c3 85ac      	LDD  R26,Y+12
0001c4 85bd      	LDD  R27,Y+12+1
0001c5 e0e0      	LDI  R30,LOW(0)
0001c6 e0f0      	LDI  R31,HIGH(0)
0001c7 93ed      	ST   X+,R30
0001c8 93fc      	ST   X,R31
                 _0x2020016:
0001c9 89ea      	LDD  R30,Y+18
0001ca 89fb      	LDD  R31,Y+18+1
0001cb 9631      	ADIW R30,1
0001cc 8bea      	STD  Y+18,R30
0001cd 8bfb      	STD  Y+18+1,R31
0001ce 9731      	SBIW R30,1
0001cf 91e4      	LPM  R30,Z
0001d0 2f2e      	MOV  R18,R30
0001d1 30e0      	CPI  R30,0
0001d2 f409      	BRNE PC+2
0001d3 c115      	RJMP _0x2020018
0001d4 2fe1      	MOV  R30,R17
0001d5 30e0      	CPI  R30,0
0001d6 f439      	BRNE _0x202001C
0001d7 3225      	CPI  R18,37
0001d8 f411      	BRNE _0x202001D
0001d9 e011      	LDI  R17,LOW(1)
0001da c002      	RJMP _0x202001E
                 _0x202001D:
0001db 940e 034c 	CALL SUBOPT_0x2
                 _0x202001E:
0001dd c10a      	RJMP _0x202001B
                 _0x202001C:
0001de 30e1      	CPI  R30,LOW(0x1)
0001df f4a9      	BRNE _0x202001F
0001e0 3225      	CPI  R18,37
0001e1 f419      	BRNE _0x2020020
0001e2 940e 034c 	CALL SUBOPT_0x2
0001e4 c102      	RJMP _0x20200CC
                 _0x2020020:
0001e5 e012      	LDI  R17,LOW(2)
0001e6 e040      	LDI  R20,LOW(0)
0001e7 e000      	LDI  R16,LOW(0)
0001e8 322d      	CPI  R18,45
0001e9 f411      	BRNE _0x2020021
0001ea e001      	LDI  R16,LOW(1)
0001eb c0fc      	RJMP _0x202001B
                 _0x2020021:
0001ec 322b      	CPI  R18,43
0001ed f411      	BRNE _0x2020022
0001ee e24b      	LDI  R20,LOW(43)
0001ef c0f8      	RJMP _0x202001B
                 _0x2020022:
0001f0 3220      	CPI  R18,32
0001f1 f411      	BRNE _0x2020023
0001f2 e240      	LDI  R20,LOW(32)
0001f3 c0f4      	RJMP _0x202001B
                 _0x2020023:
0001f4 c002      	RJMP _0x2020024
                 _0x202001F:
0001f5 30e2      	CPI  R30,LOW(0x2)
0001f6 f439      	BRNE _0x2020025
                 _0x2020024:
0001f7 e050      	LDI  R21,LOW(0)
0001f8 e013      	LDI  R17,LOW(3)
0001f9 3320      	CPI  R18,48
0001fa f411      	BRNE _0x2020026
0001fb 6800      	ORI  R16,LOW(128)
0001fc c0eb      	RJMP _0x202001B
                 _0x2020026:
0001fd c003      	RJMP _0x2020027
                 _0x2020025:
0001fe 30e3      	CPI  R30,LOW(0x3)
0001ff f009      	BREQ PC+2
000200 c0e7      	RJMP _0x202001B
                 _0x2020027:
000201 3320      	CPI  R18,48
000202 f010      	BRLO _0x202002A
000203 332a      	CPI  R18,58
000204 f008      	BRLO _0x202002B
                 _0x202002A:
000205 c007      	RJMP _0x2020029
                 _0x202002B:
000206 e0aa      	LDI  R26,LOW(10)
000207 9f5a      	MUL  R21,R26
000208 2d50      	MOV  R21,R0
000209 2fe2      	MOV  R30,R18
00020a 53e0      	SUBI R30,LOW(48)
00020b 0f5e      	ADD  R21,R30
00020c c0db      	RJMP _0x202001B
                 _0x2020029:
00020d 2fe2      	MOV  R30,R18
00020e 36e3      	CPI  R30,LOW(0x63)
00020f f449      	BRNE _0x202002F
000210 940e 0353 	CALL SUBOPT_0x3
000212 89e8      	LDD  R30,Y+16
000213 89f9      	LDD  R31,Y+16+1
000214 81a4      	LDD  R26,Z+4
000215 93aa      	ST   -Y,R26
000216 940e 0359 	CALL SUBOPT_0x4
000218 c0ce      	RJMP _0x2020030
                 _0x202002F:
000219 37e3      	CPI  R30,LOW(0x73)
00021a f441      	BRNE _0x2020032
00021b 940e 0353 	CALL SUBOPT_0x3
00021d 940e 035f 	CALL SUBOPT_0x5
00021f 940e 0325 	CALL _strlen
000221 2f1e      	MOV  R17,R30
000222 c00a      	RJMP _0x2020033
                 _0x2020032:
000223 37e0      	CPI  R30,LOW(0x70)
000224 f461      	BRNE _0x2020035
000225 940e 0353 	CALL SUBOPT_0x3
000227 940e 035f 	CALL SUBOPT_0x5
000229 940e 0331 	CALL _strlenf
00022b 2f1e      	MOV  R17,R30
00022c 6008      	ORI  R16,LOW(8)
                 _0x2020033:
00022d 6002      	ORI  R16,LOW(2)
00022e 770f      	ANDI R16,LOW(127)
00022f e030      	LDI  R19,LOW(0)
000230 c034      	RJMP _0x2020036
                 _0x2020035:
000231 36e4      	CPI  R30,LOW(0x64)
000232 f011      	BREQ _0x2020039
000233 36e9      	CPI  R30,LOW(0x69)
000234 f411      	BRNE _0x202003A
                 _0x2020039:
000235 6004      	ORI  R16,LOW(4)
000236 c002      	RJMP _0x202003B
                 _0x202003A:
000237 37e5      	CPI  R30,LOW(0x75)
000238 f431      	BRNE _0x202003C
                 _0x202003B:
000239 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
00023a e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00023b 83ee      	STD  Y+6,R30
00023c 83ff      	STD  Y+6+1,R31
00023d e015      	LDI  R17,LOW(5)
00023e c00c      	RJMP _0x202003D
                 _0x202003C:
00023f 35e8      	CPI  R30,LOW(0x58)
000240 f411      	BRNE _0x202003F
000241 6008      	ORI  R16,LOW(8)
000242 c003      	RJMP _0x2020040
                 _0x202003F:
000243 37e8      	CPI  R30,LOW(0x78)
000244 f009      	BREQ PC+2
000245 c0a1      	RJMP _0x2020071
                 _0x2020040:
000246 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000247 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000248 83ee      	STD  Y+6,R30
000249 83ff      	STD  Y+6+1,R31
00024a e014      	LDI  R17,LOW(4)
                 _0x202003D:
00024b ff02      	SBRS R16,2
00024c c014      	RJMP _0x2020042
00024d 940e 0353 	CALL SUBOPT_0x3
00024f 940e 0369 	CALL SUBOPT_0x6
000251 85ab      	LDD  R26,Y+11
000252 23aa      	TST  R26
000253 f43a      	BRPL _0x2020043
000254 85ea      	LDD  R30,Y+10
000255 85fb      	LDD  R31,Y+10+1
000256 940e 0386 	CALL __ANEGW1
000258 87ea      	STD  Y+10,R30
000259 87fb      	STD  Y+10+1,R31
00025a e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00025b 3040      	CPI  R20,0
00025c f011      	BREQ _0x2020044
00025d 5f1f      	SUBI R17,-LOW(1)
00025e c001      	RJMP _0x2020045
                 _0x2020044:
00025f 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000260 c004      	RJMP _0x2020046
                 _0x2020042:
000261 940e 0353 	CALL SUBOPT_0x3
000263 940e 0369 	CALL SUBOPT_0x6
                 _0x2020046:
                 _0x2020036:
000265 fd00      	SBRC R16,0
000266 c011      	RJMP _0x2020047
                 _0x2020048:
000267 1715      	CP   R17,R21
000268 f478      	BRSH _0x202004A
000269 ff07      	SBRS R16,7
00026a c008      	RJMP _0x202004B
00026b ff02      	SBRS R16,2
00026c c004      	RJMP _0x202004C
00026d 7f0b      	ANDI R16,LOW(251)
00026e 2f24      	MOV  R18,R20
00026f 5011      	SUBI R17,LOW(1)
000270 c001      	RJMP _0x202004D
                 _0x202004C:
000271 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000272 c001      	RJMP _0x202004E
                 _0x202004B:
000273 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000274 940e 034c 	CALL SUBOPT_0x2
000276 5051      	SUBI R21,LOW(1)
000277 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000278 2f31      	MOV  R19,R17
000279 ff01      	SBRS R16,1
00027a c017      	RJMP _0x202004F
                 _0x2020050:
00027b 3030      	CPI  R19,0
00027c f0a1      	BREQ _0x2020052
00027d ff03      	SBRS R16,3
00027e c006      	RJMP _0x2020053
00027f 81ee      	LDD  R30,Y+6
000280 81ff      	LDD  R31,Y+6+1
000281 9125      	LPM  R18,Z+
000282 83ee      	STD  Y+6,R30
000283 83ff      	STD  Y+6+1,R31
000284 c005      	RJMP _0x2020054
                 _0x2020053:
000285 81ae      	LDD  R26,Y+6
000286 81bf      	LDD  R27,Y+6+1
000287 912d      	LD   R18,X+
000288 83ae      	STD  Y+6,R26
000289 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00028a 940e 034c 	CALL SUBOPT_0x2
00028c 3050      	CPI  R21,0
00028d f009      	BREQ _0x2020055
00028e 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00028f 5031      	SUBI R19,LOW(1)
000290 cfea      	RJMP _0x2020050
                 _0x2020052:
000291 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000292 e320      	LDI  R18,LOW(48)
000293 81ee      	LDD  R30,Y+6
000294 81ff      	LDD  R31,Y+6+1
000295 940e 038e 	CALL __GETW1PF
000297 87e8      	STD  Y+8,R30
000298 87f9      	STD  Y+8+1,R31
000299 81ee      	LDD  R30,Y+6
00029a 81ff      	LDD  R31,Y+6+1
00029b 9632      	ADIW R30,2
00029c 83ee      	STD  Y+6,R30
00029d 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00029e 85e8      	LDD  R30,Y+8
00029f 85f9      	LDD  R31,Y+8+1
0002a0 85aa      	LDD  R26,Y+10
0002a1 85bb      	LDD  R27,Y+10+1
0002a2 17ae      	CP   R26,R30
0002a3 07bf      	CPC  R27,R31
0002a4 f050      	BRLO _0x202005C
0002a5 5f2f      	SUBI R18,-LOW(1)
0002a6 85a8      	LDD  R26,Y+8
0002a7 85b9      	LDD  R27,Y+8+1
0002a8 85ea      	LDD  R30,Y+10
0002a9 85fb      	LDD  R31,Y+10+1
0002aa 1bea      	SUB  R30,R26
0002ab 0bfb      	SBC  R31,R27
0002ac 87ea      	STD  Y+10,R30
0002ad 87fb      	STD  Y+10+1,R31
0002ae cfef      	RJMP _0x202005A
                 _0x202005C:
0002af 332a      	CPI  R18,58
0002b0 f028      	BRLO _0x202005D
0002b1 ff03      	SBRS R16,3
0002b2 c002      	RJMP _0x202005E
0002b3 5f29      	SUBI R18,-LOW(7)
0002b4 c001      	RJMP _0x202005F
                 _0x202005E:
0002b5 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0002b6 fd04      	SBRC R16,4
0002b7 c01a      	RJMP _0x2020061
0002b8 3321      	CPI  R18,49
0002b9 f420      	BRSH _0x2020063
0002ba 85a8      	LDD  R26,Y+8
0002bb 85b9      	LDD  R27,Y+8+1
0002bc 9711      	SBIW R26,1
0002bd f409      	BRNE _0x2020062
                 _0x2020063:
0002be c009      	RJMP _0x20200CD
                 _0x2020062:
0002bf 1753      	CP   R21,R19
0002c0 f010      	BRLO _0x2020067
0002c1 ff00      	SBRS R16,0
0002c2 c001      	RJMP _0x2020068
                 _0x2020067:
0002c3 c013      	RJMP _0x2020066
                 _0x2020068:
0002c4 e220      	LDI  R18,LOW(32)
0002c5 ff07      	SBRS R16,7
0002c6 c00b      	RJMP _0x2020069
0002c7 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0002c8 6100      	ORI  R16,LOW(16)
0002c9 ff02      	SBRS R16,2
0002ca c007      	RJMP _0x202006A
0002cb 7f0b      	ANDI R16,LOW(251)
0002cc 934a      	ST   -Y,R20
0002cd 940e 0359 	CALL SUBOPT_0x4
0002cf 3050      	CPI  R21,0
0002d0 f009      	BREQ _0x202006B
0002d1 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0002d2 940e 034c 	CALL SUBOPT_0x2
0002d4 3050      	CPI  R21,0
0002d5 f009      	BREQ _0x202006C
0002d6 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0002d7 5031      	SUBI R19,LOW(1)
0002d8 85a8      	LDD  R26,Y+8
0002d9 85b9      	LDD  R27,Y+8+1
0002da 9712      	SBIW R26,2
0002db f008      	BRLO _0x2020059
0002dc cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0002dd ff00      	SBRS R16,0
0002de c008      	RJMP _0x202006D
                 _0x202006E:
0002df 3050      	CPI  R21,0
0002e0 f031      	BREQ _0x2020070
0002e1 5051      	SUBI R21,LOW(1)
0002e2 e2e0      	LDI  R30,LOW(32)
0002e3 93ea      	ST   -Y,R30
0002e4 940e 0359 	CALL SUBOPT_0x4
0002e6 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0002e7 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0002e8 cee0      	RJMP _0x2020016
                 _0x2020018:
0002e9 85ac      	LDD  R26,Y+12
0002ea 85bd      	LDD  R27,Y+12+1
0002eb 940e 038a 	CALL __GETW1P
0002ed 940e 039e 	CALL __LOADLOCR6
0002ef 9664      	ADIW R28,20
0002f0 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002f1 92ff      	PUSH R15
0002f2 2ef8      	MOV  R15,R24
0002f3 9726      	SBIW R28,6
0002f4 940e 0399 	CALL __SAVELOCR4
0002f6 940e 0371 	CALL SUBOPT_0x7
0002f8 9730      	SBIW R30,0
0002f9 f419      	BRNE _0x2020072
0002fa efef      	LDI  R30,LOW(65535)
0002fb efff      	LDI  R31,HIGH(65535)
0002fc c023      	RJMP _0x2080001
                 _0x2020072:
0002fd 01de      	MOVW R26,R28
0002fe 9616      	ADIW R26,6
0002ff 940e 0382 	CALL __ADDW2R15
000301 018d      	MOVW R16,R26
000302 940e 0371 	CALL SUBOPT_0x7
000304 83ee      	STD  Y+6,R30
000305 83ff      	STD  Y+6+1,R31
000306 e0e0      	LDI  R30,LOW(0)
000307 87e8      	STD  Y+8,R30
000308 87e9      	STD  Y+8+1,R30
000309 01de      	MOVW R26,R28
00030a 961a      	ADIW R26,10
00030b 940e 0382 	CALL __ADDW2R15
00030d 940e 038a 	CALL __GETW1P
00030f 93fa      	ST   -Y,R31
000310 93ea      	ST   -Y,R30
000311 931a      	ST   -Y,R17
000312 930a      	ST   -Y,R16
000313 e7ed      	LDI  R30,LOW(_put_buff_G101)
000314 e0f1      	LDI  R31,HIGH(_put_buff_G101)
000315 93fa      	ST   -Y,R31
000316 93ea      	ST   -Y,R30
000317 01de      	MOVW R26,R28
000318 961a      	ADIW R26,10
000319 dea3      	RCALL __print_G101
00031a 019f      	MOVW R18,R30
00031b 81ae      	LDD  R26,Y+6
00031c 81bf      	LDD  R27,Y+6+1
00031d e0e0      	LDI  R30,LOW(0)
00031e 93ec      	ST   X,R30
00031f 01f9      	MOVW R30,R18
                 _0x2080001:
000320 940e 03a0 	CALL __LOADLOCR4
000322 962a      	ADIW R28,10
000323 90ff      	POP  R15
000324 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000325 93ba      	ST   -Y,R27
000326 93aa      	ST   -Y,R26
000327 91a9          ld   r26,y+
000328 91b9          ld   r27,y+
000329 27ee          clr  r30
00032a 27ff          clr  r31
                 strlen0:
00032b 916d          ld   r22,x+
00032c 2366          tst  r22
00032d f011          breq strlen1
00032e 9631          adiw r30,1
00032f cffb          rjmp strlen0
                 strlen1:
000330 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000331 93ba      	ST   -Y,R27
000332 93aa      	ST   -Y,R26
000333 27aa          clr  r26
000334 27bb          clr  r27
000335 91e9          ld   r30,y+
000336 91f9          ld   r31,y+
                 strlenf0:
000337 9005      	lpm  r0,z+
000338 2000          tst  r0
000339 f011          breq strlenf1
00033a 9611          adiw r26,1
00033b cffb          rjmp strlenf0
                 strlenf1:
00033c 01fd          movw r30,r26
00033d 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000260           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00033e 940e 0104 	CALL __lcd_write_data
000340 e0a3      	LDI  R26,LOW(3)
000341 e0b0      	LDI  R27,0
000342 940c 0378 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
000344 e3a0      	LDI  R26,LOW(48)
000345 940e 00f0 	CALL __lcd_write_nibble_G100
                +
000347 ec88     +LDI R24 , LOW ( 200 )
000348 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000349 9701     +SBIW R24 , 1
00034a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00034b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
00034c 932a      	ST   -Y,R18
00034d 85ad      	LDD  R26,Y+13
00034e 85be      	LDD  R27,Y+13+1
00034f 85ef      	LDD  R30,Y+15
000350 89f8      	LDD  R31,Y+15+1
000351 9509      	ICALL
000352 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
000353 89e8      	LDD  R30,Y+16
000354 89f9      	LDD  R31,Y+16+1
000355 9734      	SBIW R30,4
000356 8be8      	STD  Y+16,R30
000357 8bf9      	STD  Y+16+1,R31
000358 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000359 85ad      	LDD  R26,Y+13
00035a 85be      	LDD  R27,Y+13+1
00035b 85ef      	LDD  R30,Y+15
00035c 89f8      	LDD  R31,Y+15+1
00035d 9509      	ICALL
00035e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
00035f 89a8      	LDD  R26,Y+16
000360 89b9      	LDD  R27,Y+16+1
000361 9614      	ADIW R26,4
000362 940e 038a 	CALL __GETW1P
000364 83ee      	STD  Y+6,R30
000365 83ff      	STD  Y+6+1,R31
000366 81ae      	LDD  R26,Y+6
000367 81bf      	LDD  R27,Y+6+1
000368 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
000369 89a8      	LDD  R26,Y+16
00036a 89b9      	LDD  R27,Y+16+1
00036b 9614      	ADIW R26,4
00036c 940e 038a 	CALL __GETW1P
00036e 87ea      	STD  Y+10,R30
00036f 87fb      	STD  Y+10+1,R31
000370 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000371 01de      	MOVW R26,R28
000372 961c      	ADIW R26,12
000373 940e 0382 	CALL __ADDW2R15
000375 940e 038a 	CALL __GETW1P
000377 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000378 9610      	adiw r26,0
000379 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00037a ed80     +LDI R24 , LOW ( 0x7D0 )
00037b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00037c 9701     +SBIW R24 , 1
00037d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00037e 95a8      	wdr
00037f 9711      	sbiw r26,1
000380 f7c9      	brne __delay_ms0
                 __delay_ms1:
000381 9508      	ret
                 
                 __ADDW2R15:
000382 2400      	CLR  R0
000383 0daf      	ADD  R26,R15
000384 1db0      	ADC  R27,R0
000385 9508      	RET
                 
                 __ANEGW1:
000386 95f1      	NEG  R31
000387 95e1      	NEG  R30
000388 40f0      	SBCI R31,0
000389 9508      	RET
                 
                 __GETW1P:
00038a 91ed      	LD   R30,X+
00038b 91fc      	LD   R31,X
00038c 9711      	SBIW R26,1
00038d 9508      	RET
                 
                 __GETW1PF:
00038e 9005      	LPM  R0,Z+
00038f 91f4      	LPM  R31,Z
000390 2de0      	MOV  R30,R0
000391 9508      	RET
                 
                 __PUTPARD1:
000392 937a      	ST   -Y,R23
000393 936a      	ST   -Y,R22
000394 93fa      	ST   -Y,R31
000395 93ea      	ST   -Y,R30
000396 9508      	RET
                 
                 __SAVELOCR6:
000397 935a      	ST   -Y,R21
                 __SAVELOCR5:
000398 934a      	ST   -Y,R20
                 __SAVELOCR4:
000399 933a      	ST   -Y,R19
                 __SAVELOCR3:
00039a 932a      	ST   -Y,R18
                 __SAVELOCR2:
00039b 931a      	ST   -Y,R17
00039c 930a      	ST   -Y,R16
00039d 9508      	RET
                 
                 __LOADLOCR6:
00039e 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00039f 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003a0 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003a1 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003a2 8119      	LDD  R17,Y+1
0003a3 8108      	LD   R16,Y
0003a4 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  40 r17:  30 r18:  37 r19:  16 r20:   9 r21:  20 r22:   6 r23:   2 
r24:  25 r25:   5 r26: 104 r27:  43 r28:  18 r29:   1 r30: 174 r31:  62 
x  :  23 y  : 166 z  :  15 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   6 
adiw  :  25 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   0 brmi  :   1 brne  :  32 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  52 
cbi   :   8 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  14 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   4 cpi   :  36 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  23 ld    :  25 ldd   :  77 ldi   : 101 
lds   :   0 lpm   :  14 lsl   :   2 lsr   :   0 mov   :  26 movw  :  18 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   8 out   :  13 pop   :   1 push  :   1 rcall :  24 ret   :  27 
reti  :   0 rjmp  :  68 rol   :   2 ror   :   0 sbc   :   1 sbci  :   3 
sbi   :   7 sbic  :   3 sbis  :   3 sbiw  :  20 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  59 std   :  31 sts   :   2 sub   :   1 subi  :  17 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 57 out of 116 (49.1%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00074a   1822     44   1866   32768   5.7%
[.dseg] 0x000060 0x000264      0      4      4    2048   0.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
