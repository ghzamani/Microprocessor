
AVRASM ver. 2.1.30  E:\uni\microproc\final project\Software\List\program.asm Thu Jan 27 00:52:52 2022

E:\uni\microproc\final project\Software\List\program.asm(1088): warning: Register r5 already defined by the .DEF directive
E:\uni\microproc\final project\Software\List\program.asm(1089): warning: Register r4 already defined by the .DEF directive
E:\uni\microproc\final project\Software\List\program.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0059 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 6554
000034 706d
000035 3a20
000036 4300      	.DB  0x54,0x65,0x6D,0x70,0x20,0x3A,0x0,0x43
000037 7300
000038 6174
000039 6574
00003a 203a      	.DB  0x0,0x73,0x74,0x61,0x74,0x65,0x3A,0x20
00003b 0031
00003c 7473
00003d 7461
00003e 3a65      	.DB  0x31,0x0,0x73,0x74,0x61,0x74,0x65,0x3A
00003f 3220
000040 7300
000041 6174
000042 6574      	.DB  0x20,0x32,0x0,0x73,0x74,0x61,0x74,0x65
000043 203a
000044 0033      	.DB  0x3A,0x20,0x33,0x0
                 _0x2000003:
000045 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000046 0007      	.DW  0x07
000047 0260      	.DW  _0xC
000048 0066      	.DW  _0x0*2
                 
000049 0002      	.DW  0x02
00004a 0267      	.DW  _0xC+7
00004b 006d      	.DW  _0x0*2+7
                 
00004c 0009      	.DW  0x09
00004d 0269      	.DW  _0xC+9
00004e 006f      	.DW  _0x0*2+9
                 
00004f 0009      	.DW  0x09
000050 0272      	.DW  _0xC+18
000051 0078      	.DW  _0x0*2+18
                 
000052 0009      	.DW  0x09
000053 027b      	.DW  _0xC+27
000054 0081      	.DW  _0x0*2+27
                 
000055 0002      	.DW  0x02
000056 0284      	.DW  __base_y_G100
000057 008a      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000058 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000059 94f8      	CLI
00005a 27ee      	CLR  R30
00005b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005c e0f1      	LDI  R31,1
00005d bffb      	OUT  GICR,R31
00005e bfeb      	OUT  GICR,R30
00005f bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000060 e1f8      	LDI  R31,0x18
000061 bdf1      	OUT  WDTCR,R31
000062 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000063 e08d      	LDI  R24,(14-2)+1
000064 e0a2      	LDI  R26,2
000065 27bb      	CLR  R27
                 __CLEAR_REG:
000066 93ed      	ST   X+,R30
000067 958a      	DEC  R24
000068 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000069 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006a e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006c 93ed      	ST   X+,R30
00006d 9701      	SBIW R24,1
00006e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006f e8ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000070 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000071 9185      	LPM  R24,Z+
000072 9195      	LPM  R25,Z+
000073 9700      	SBIW R24,0
000074 f061      	BREQ __GLOBAL_INI_END
000075 91a5      	LPM  R26,Z+
000076 91b5      	LPM  R27,Z+
000077 9005      	LPM  R0,Z+
000078 9015      	LPM  R1,Z+
000079 01bf      	MOVW R22,R30
00007a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007b 9005      	LPM  R0,Z+
00007c 920d      	ST   X+,R0
00007d 9701      	SBIW R24,1
00007e f7e1      	BRNE __GLOBAL_INI_LOOP
00007f 01fb      	MOVW R30,R22
000080 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000081 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000082 bfed      	OUT  SPL,R30
000083 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000084 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000085 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000086 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000087 940c 00fd 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdbool.h>
                 ;#include <stdio.h>
                 ;
                 ;unsigned char int_to_char(int x) {
                 ; 0000 0007 unsigned char int_to_char(int x) {
                 
                 	.CSEG
                 _int_to_char:
                 ; .FSTART _int_to_char
                 ; 0000 0008     return x + '0';
000089 93ba      	ST   -Y,R27
00008a 93aa      	ST   -Y,R26
                 ;	x -> Y+0
00008b 81e8      	LD   R30,Y
00008c 5de0      	SUBI R30,-LOW(48)
00008d c177      	RJMP _0x2080002
                 ; 0000 0009 }
                 ; .FEND
                 ;
                 ;void put_on_lcd(int value, int c) {
                 ; 0000 000B void put_on_lcd(int value, int c) {
                 _put_on_lcd:
                 ; .FSTART _put_on_lcd
                 ; 0000 000C     unsigned int r = 1;
                 ; 0000 000D     unsigned char tens = int_to_char(value / 10);
                 ; 0000 000E     unsigned char ones = int_to_char(value % 10);
                 ; 0000 000F     lcd_gotoxy(c, r);
00008e 93ba      	ST   -Y,R27
00008f 93aa      	ST   -Y,R26
000090 940e 03b8 	CALL __SAVELOCR4
                 ;	value -> Y+6
                 ;	c -> Y+4
                 ;	r -> R16,R17
                 ;	tens -> R19
                 ;	ones -> R18
                +
000092 e001     +LDI R16 , LOW ( 1 )
000093 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
000094 81ae      	LDD  R26,Y+6
000095 81bf      	LDD  R27,Y+6+1
000096 e0ea      	LDI  R30,LOW(10)
000097 e0f0      	LDI  R31,HIGH(10)
000098 940e 0397 	CALL __DIVW21
00009a 01df      	MOVW R26,R30
00009b dfed      	RCALL _int_to_char
00009c 2f3e      	MOV  R19,R30
00009d 81ae      	LDD  R26,Y+6
00009e 81bf      	LDD  R27,Y+6+1
00009f e0ea      	LDI  R30,LOW(10)
0000a0 e0f0      	LDI  R31,HIGH(10)
0000a1 940e 039c 	CALL __MODW21
0000a3 01df      	MOVW R26,R30
0000a4 dfe4      	RCALL _int_to_char
0000a5 2f2e      	MOV  R18,R30
0000a6 81ec      	LDD  R30,Y+4
0000a7 93ea      	ST   -Y,R30
0000a8 2fa0      	MOV  R26,R16
0000a9 d150      	RCALL _lcd_gotoxy
                 ; 0000 0010     lcd_putchar(tens);
0000aa 2fa3      	MOV  R26,R19
0000ab d167      	RCALL _lcd_putchar
                 ; 0000 0011     lcd_gotoxy(c + 1, r);
0000ac 81ec      	LDD  R30,Y+4
0000ad 5fef      	SUBI R30,-LOW(1)
0000ae 93ea      	ST   -Y,R30
0000af 2fa0      	MOV  R26,R16
0000b0 d149      	RCALL _lcd_gotoxy
                 ; 0000 0012     lcd_putchar(ones);
0000b1 2fa2      	MOV  R26,R18
0000b2 d160      	RCALL _lcd_putchar
                 ; 0000 0013 }
0000b3 940e 03bd 	CALL __LOADLOCR4
0000b5 9628      	ADIW R28,8
0000b6 9508      	RET
                 ; .FEND
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input) {
                 ; 0000 0019 unsigned int read_adc(unsigned char adc_input) {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 001A     ADMUX = adc_input | ADC_VREF_TYPE;
0000b7 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0000b8 81e8      	LD   R30,Y
0000b9 64e0      	ORI  R30,0x40
0000ba b9e7      	OUT  0x7,R30
                 ; 0000 001B     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 001C     delay_us(10);
                +
0000bb e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000bc 958a     +DEC R24
0000bd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 001D     // Start the AD conversion
                 ; 0000 001E     ADCSRA |= (1 << ADSC);
0000be 9a36      	SBI  0x6,6
                 ; 0000 001F     // Wait for the AD conversion to complete
                 ; 0000 0020     while ((ADCSRA & (1 << ADIF)) == 0);
                 _0x3:
0000bf 9b34      	SBIS 0x6,4
0000c0 cffe      	RJMP _0x3
                 ; 0000 0021     ADCSRA |= (1 << ADIF);
0000c1 9a34      	SBI  0x6,4
                 ; 0000 0022     return ADCW;
0000c2 b1e4      	IN   R30,0x4
0000c3 b1f5      	IN   R31,0x4+1
0000c4 c1a0      	RJMP _0x2080001
                 ; 0000 0023 }
                 ; .FEND
                 ;
                 ;void cooler_rotational_speed(int st){
                 ; 0000 0025 void cooler_rotational_speed(int st){
                 _cooler_rotational_speed:
                 ; .FSTART _cooler_rotational_speed
                 ; 0000 0026     int delay;
                 ; 0000 0027     switch(st){
0000c5 93ba      	ST   -Y,R27
0000c6 93aa      	ST   -Y,R26
0000c7 931a      	ST   -Y,R17
0000c8 930a      	ST   -Y,R16
                 ;	st -> Y+2
                 ;	delay -> R16,R17
0000c9 81ea      	LDD  R30,Y+2
0000ca 81fb      	LDD  R31,Y+2+1
                 ; 0000 0028         case 1:
0000cb 30e1      	CPI  R30,LOW(0x1)
0000cc e0a0      	LDI  R26,HIGH(0x1)
0000cd 07fa      	CPC  R31,R26
0000ce f419      	BRNE _0x9
                 ; 0000 0029             delay = 600;
                +
0000cf e508     +LDI R16 , LOW ( 600 )
0000d0 e012     +LDI R17 , HIGH ( 600 )
                 	__GETWRN 16,17,600
                 ; 0000 002A             break;
0000d1 c00d      	RJMP _0x8
                 ; 0000 002B         case 2:
                 _0x9:
0000d2 30e2      	CPI  R30,LOW(0x2)
0000d3 e0a0      	LDI  R26,HIGH(0x2)
0000d4 07fa      	CPC  R31,R26
0000d5 f419      	BRNE _0xA
                 ; 0000 002C             delay = 400;
                +
0000d6 e900     +LDI R16 , LOW ( 400 )
0000d7 e011     +LDI R17 , HIGH ( 400 )
                 	__GETWRN 16,17,400
                 ; 0000 002D             break;
0000d8 c006      	RJMP _0x8
                 ; 0000 002E         case 3:
                 _0xA:
0000d9 30e3      	CPI  R30,LOW(0x3)
0000da e0a0      	LDI  R26,HIGH(0x3)
0000db 07fa      	CPC  R31,R26
0000dc f411      	BRNE _0x8
                 ; 0000 002F             delay = 200;
                +
0000dd ec08     +LDI R16 , LOW ( 200 )
0000de e010     +LDI R17 , HIGH ( 200 )
                 	__GETWRN 16,17,200
                 ; 0000 0030             break;
                 ; 0000 0031     }
                 _0x8:
                 ; 0000 0032 
                 ; 0000 0033     DDRD = 0x0F;
0000df e0ef      	LDI  R30,LOW(15)
0000e0 bbe1      	OUT  0x11,R30
                 ; 0000 0034     PORTD = 0x09;
0000e1 e0e9      	LDI  R30,LOW(9)
0000e2 940e 0267 	CALL SUBOPT_0x0
                 ; 0000 0035     delay_ms(delay);
                 ; 0000 0036     PORTD = 0x08;
0000e4 e0e8      	LDI  R30,LOW(8)
0000e5 940e 0267 	CALL SUBOPT_0x0
                 ; 0000 0037     delay_ms(delay);
                 ; 0000 0038     PORTD = 0x0C;
0000e7 e0ec      	LDI  R30,LOW(12)
0000e8 940e 0267 	CALL SUBOPT_0x0
                 ; 0000 0039     delay_ms(delay);
                 ; 0000 003A     PORTD = 0x04;
0000ea e0e4      	LDI  R30,LOW(4)
0000eb 940e 0267 	CALL SUBOPT_0x0
                 ; 0000 003B     delay_ms(delay);
                 ; 0000 003C     PORTD = 0x06;
0000ed e0e6      	LDI  R30,LOW(6)
0000ee 940e 0267 	CALL SUBOPT_0x0
                 ; 0000 003D     delay_ms(delay);
                 ; 0000 003E     PORTD = 0x02;
0000f0 e0e2      	LDI  R30,LOW(2)
0000f1 940e 0267 	CALL SUBOPT_0x0
                 ; 0000 003F     delay_ms(delay);
                 ; 0000 0040     PORTD = 0x03;
0000f3 e0e3      	LDI  R30,LOW(3)
0000f4 940e 0267 	CALL SUBOPT_0x0
                 ; 0000 0041     delay_ms(delay);
                 ; 0000 0042     PORTD = 0x01;
0000f6 e0e1      	LDI  R30,LOW(1)
0000f7 940e 0267 	CALL SUBOPT_0x0
                 ; 0000 0043     delay_ms(delay);
                 ; 0000 0044 }
0000f9 8119      	LDD  R17,Y+1
0000fa 8108      	LDD  R16,Y+0
0000fb 9624      	ADIW R28,4
0000fc 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void main(void) {
                 ; 0000 0047 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 0048     int temperature;
                 ; 0000 0049     unsigned int state = 1;
                 ; 0000 004A     bool cooler = false;
                 ; 0000 004B     bool heater = false;
                 ; 0000 004C 
                 ; 0000 004D     int cooler_state = 0;
                 ; 0000 004E 
                 ; 0000 004F     int period = 200;
                 ; 0000 0050     // ADC initialization
                 ; 0000 0051     // ADC Clock frequency: 250.000 kHz
                 ; 0000 0052     // ADC Voltage Reference: AVCC pin
                 ; 0000 0053     // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0054     ADMUX |= (1<<MUX0);
0000fd 9724      	SBIW R28,4
0000fe ece8      	LDI  R30,LOW(200)
0000ff 83e8      	ST   Y,R30
000100 e0e0      	LDI  R30,LOW(0)
000101 83e9      	STD  Y+1,R30
000102 83ea      	STD  Y+2,R30
000103 83eb      	STD  Y+3,R30
                 ;	temperature -> R16,R17
                 ;	state -> R18,R19
                 ;	cooler -> R21
                 ;	heater -> R20
                 ;	cooler_state -> Y+2
                 ;	period -> Y+0
                +
000104 e021     +LDI R18 , LOW ( 1 )
000105 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
000106 e050      	LDI  R21,0
000107 e040      	LDI  R20,0
000108 9a38      	SBI  0x7,0
                 ; 0000 0055     //ADMUX=ADC_VREF_TYPE;
                 ; 0000 0056     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
000109 e8e5      	LDI  R30,LOW(133)
00010a b9e6      	OUT  0x6,R30
                 ; 0000 0057     SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00010b e0e0      	LDI  R30,LOW(0)
00010c bfe0      	OUT  0x30,R30
                 ; 0000 0058 
                 ; 0000 0059     lcd_init(16);
00010d e1a0      	LDI  R26,LOW(16)
00010e d12a      	RCALL _lcd_init
                 ; 0000 005A 
                 ; 0000 005B     lcd_gotoxy(3, 0);
00010f 940e 026b 	CALL SUBOPT_0x1
                 ; 0000 005C     //lcd_puts("LM35 Sensor");
                 ; 0000 005D 
                 ; 0000 005E     lcd_gotoxy(2, 1);
000111 e0e2      	LDI  R30,LOW(2)
000112 940e 0270 	CALL SUBOPT_0x2
                 ; 0000 005F     lcd_puts("Temp :");
                +
000114 e6a0     +LDI R26 , LOW ( _0xC + ( 0 ) )
000115 e0b2     +LDI R27 , HIGH ( _0xC + ( 0 ) )
                 	__POINTW2MN _0xC,0
000116 d111      	RCALL _lcd_puts
                 ; 0000 0060 
                 ; 0000 0061     lcd_gotoxy(12, 1);
000117 e0ec      	LDI  R30,LOW(12)
000118 940e 0270 	CALL SUBOPT_0x2
                 ; 0000 0062     lcd_putchar(223);
00011a edaf      	LDI  R26,LOW(223)
00011b d0f7      	RCALL _lcd_putchar
                 ; 0000 0063 
                 ; 0000 0064     lcd_gotoxy(13, 1);
00011c e0ed      	LDI  R30,LOW(13)
00011d 940e 0270 	CALL SUBOPT_0x2
                 ; 0000 0065     lcd_puts("C");
                +
00011f e6a7     +LDI R26 , LOW ( _0xC + ( 7 ) )
000120 e0b2     +LDI R27 , HIGH ( _0xC + ( 7 ) )
                 	__POINTW2MN _0xC,7
000121 d106      	RCALL _lcd_puts
                 ; 0000 0066 
                 ; 0000 0067     delay_ms(1000);
000122 eea8      	LDI  R26,LOW(1000)
000123 e0b3      	LDI  R27,HIGH(1000)
000124 940e 0287 	CALL _delay_ms
                 ; 0000 0068     while (1) {
                 _0xD:
                 ; 0000 0069         temperature = read_adc(0);
000126 e0a0      	LDI  R26,LOW(0)
000127 df8f      	RCALL _read_adc
000128 018f      	MOVW R16,R30
                 ; 0000 006A         temperature = temperature * 0.48898;
000129 940e 037f 	CALL __CWD1
00012b 940e 02f7 	CALL __CDF1
                +
00012d e9a6     +LDI R26 , LOW ( 0x3EFA5B96 )
00012e e5bb     +LDI R27 , HIGH ( 0x3EFA5B96 )
00012f ef8a     +LDI R24 , BYTE3 ( 0x3EFA5B96 )
000130 e39e     +LDI R25 , BYTE4 ( 0x3EFA5B96 )
                 	__GETD2N 0x3EFA5B96
000131 940e 0325 	CALL __MULF12
000133 940e 02c0 	CALL __CFD1
000135 018f      	MOVW R16,R30
                 ; 0000 006B         put_on_lcd(temperature, 9);
000136 931a      	ST   -Y,R17
000137 930a      	ST   -Y,R16
000138 e0a9      	LDI  R26,LOW(9)
000139 e0b0      	LDI  R27,0
00013a df53      	RCALL _put_on_lcd
                 ; 0000 006C 
                 ; 0000 006D         // check the temperature to find the state
                 ; 0000 006E         if(state == 1){
00013b e0e1      	LDI  R30,LOW(1)
00013c e0f0      	LDI  R31,HIGH(1)
00013d 17e2      	CP   R30,R18
00013e 07f3      	CPC  R31,R19
00013f f4c9      	BRNE _0x10
                 ; 0000 006F 
                 ; 0000 0070             lcd_gotoxy(3, 0);
000140 940e 026b 	CALL SUBOPT_0x1
                 ; 0000 0071             lcd_puts("state: 1");
                +
000142 e6a9     +LDI R26 , LOW ( _0xC + ( 9 ) )
000143 e0b2     +LDI R27 , HIGH ( _0xC + ( 9 ) )
                 	__POINTW2MN _0xC,9
000144 d0e3      	RCALL _lcd_puts
                 ; 0000 0072             if(temperature > 35){
                +
000145 3204     +CPI R16 , LOW ( 36 )
000146 e0e0     +LDI R30 , HIGH ( 36 )
000147 071e     +CPC R17 , R30
                 	__CPWRN 16,17,36
000148 f02c      	BRLT _0x11
                 ; 0000 0073                 state = 2;
                +
000149 e022     +LDI R18 , LOW ( 2 )
00014a e030     +LDI R19 , HIGH ( 2 )
                 	__GETWRN 18,19,2
                 ; 0000 0074                 heater = false;
00014b e040      	LDI  R20,LOW(0)
                 ; 0000 0075                 cooler = true;
00014c e051      	LDI  R21,LOW(1)
                 ; 0000 0076             }
                 ; 0000 0077             else if(temperature < 15){
00014d c00a      	RJMP _0x12
                 _0x11:
                +
00014e 300f     +CPI R16 , LOW ( 15 )
00014f e0e0     +LDI R30 , HIGH ( 15 )
000150 071e     +CPC R17 , R30
                 	__CPWRN 16,17,15
000151 f424      	BRGE _0x13
                 ; 0000 0078                 state = 3;
                +
000152 e023     +LDI R18 , LOW ( 3 )
000153 e030     +LDI R19 , HIGH ( 3 )
                 	__GETWRN 18,19,3
                 ; 0000 0079                 heater = true;
000154 e041      	LDI  R20,LOW(1)
                 ; 0000 007A                 cooler = false;
000155 c001      	RJMP _0x2C
                 ; 0000 007B             }
                 ; 0000 007C             else{
                 _0x13:
                 ; 0000 007D                 //stays in state 1
                 ; 0000 007E                 heater = false;
000156 e040      	LDI  R20,LOW(0)
                 ; 0000 007F                 cooler = false;
                 _0x2C:
000157 e050      	LDI  R21,LOW(0)
                 ; 0000 0080             }
                 _0x12:
                 ; 0000 0081         }
                 ; 0000 0082         else if(state == 2){
000158 c025      	RJMP _0x15
                 _0x10:
000159 e0e2      	LDI  R30,LOW(2)
00015a e0f0      	LDI  R31,HIGH(2)
00015b 17e2      	CP   R30,R18
00015c 07f3      	CPC  R31,R19
00015d f489      	BRNE _0x16
                 ; 0000 0083 
                 ; 0000 0084             lcd_gotoxy(3, 0);
00015e 940e 026b 	CALL SUBOPT_0x1
                 ; 0000 0085             lcd_puts("state: 2");
                +
000160 e7a2     +LDI R26 , LOW ( _0xC + ( 18 ) )
000161 e0b2     +LDI R27 , HIGH ( _0xC + ( 18 ) )
                 	__POINTW2MN _0xC,18
000162 d0c5      	RCALL _lcd_puts
                 ; 0000 0086             if(temperature < 25){
                +
000163 3109     +CPI R16 , LOW ( 25 )
000164 e0e0     +LDI R30 , HIGH ( 25 )
000165 071e     +CPC R17 , R30
                 	__CPWRN 16,17,25
000166 f42c      	BRGE _0x17
                 ; 0000 0087                 state = 1;
                +
000167 e021     +LDI R18 , LOW ( 1 )
000168 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 0088                 heater = false;
000169 e040      	LDI  R20,LOW(0)
                 ; 0000 0089                 cooler = false;
00016a e050      	LDI  R21,LOW(0)
                 ; 0000 008A             }
                 ; 0000 008B             else{
00016b c002      	RJMP _0x18
                 _0x17:
                 ; 0000 008C                 //stays in state 2
                 ; 0000 008D                 heater = false;
00016c e040      	LDI  R20,LOW(0)
                 ; 0000 008E                 cooler = true;
00016d e051      	LDI  R21,LOW(1)
                 ; 0000 008F             }
                 _0x18:
                 ; 0000 0090         }
                 ; 0000 0091         else{
00016e c00f      	RJMP _0x19
                 _0x16:
                 ; 0000 0092 
                 ; 0000 0093             lcd_gotoxy(3, 0);
00016f 940e 026b 	CALL SUBOPT_0x1
                 ; 0000 0094             lcd_puts("state: 3");
                +
000171 e7ab     +LDI R26 , LOW ( _0xC + ( 27 ) )
000172 e0b2     +LDI R27 , HIGH ( _0xC + ( 27 ) )
                 	__POINTW2MN _0xC,27
000173 d0b4      	RCALL _lcd_puts
                 ; 0000 0095             //state is 3
                 ; 0000 0096             if(temperature > 30){
                +
000174 310f     +CPI R16 , LOW ( 31 )
000175 e0e0     +LDI R30 , HIGH ( 31 )
000176 071e     +CPC R17 , R30
                 	__CPWRN 16,17,31
000177 f024      	BRLT _0x1A
                 ; 0000 0097                 state = 1;
                +
000178 e021     +LDI R18 , LOW ( 1 )
000179 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 0098                 heater = false;
00017a e040      	LDI  R20,LOW(0)
                 ; 0000 0099                 cooler = false;
00017b c001      	RJMP _0x2D
                 ; 0000 009A             }
                 ; 0000 009B             else{
                 _0x1A:
                 ; 0000 009C                 //stays in state 3
                 ; 0000 009D                 heater = true;
00017c e041      	LDI  R20,LOW(1)
                 ; 0000 009E                 cooler = false;
                 _0x2D:
00017d e050      	LDI  R21,LOW(0)
                 ; 0000 009F             }
                 ; 0000 00A0         }
                 _0x19:
                 _0x15:
                 ; 0000 00A1 
                 ; 0000 00A2         DDRD = 0x00;
00017e e0e0      	LDI  R30,LOW(0)
00017f bbe1      	OUT  0x11,R30
                 ; 0000 00A3         if(cooler){
000180 3050      	CPI  R21,0
000181 f409      	BRNE PC+2
000182 c045      	RJMP _0x1C
                 ; 0000 00A4             // EXTRA POINT PART
                 ; 0000 00A5             switch(cooler_state){
000183 81ea      	LDD  R30,Y+2
000184 81fb      	LDD  R31,Y+2+1
                 ; 0000 00A6                 case(0):
000185 9730      	SBIW R30,0
000186 f449      	BRNE _0x20
                 ; 0000 00A7                     if(temperature > 35)
                +
000187 3204     +CPI R16 , LOW ( 36 )
000188 e0e0     +LDI R30 , HIGH ( 36 )
000189 071e     +CPC R17 , R30
                 	__CPWRN 16,17,36
00018a f024      	BRLT _0x21
                 ; 0000 00A8                         cooler_state = 1;
00018b e0e1      	LDI  R30,LOW(1)
00018c e0f0      	LDI  R31,HIGH(1)
00018d 83ea      	STD  Y+2,R30
00018e 83fb      	STD  Y+2+1,R31
                 ; 0000 00A9                     break;
                 _0x21:
00018f c035      	RJMP _0x1F
                 ; 0000 00AA                 case(1):
                 _0x20:
000190 30e1      	CPI  R30,LOW(0x1)
000191 e0a0      	LDI  R26,HIGH(0x1)
000192 07fa      	CPC  R31,R26
000193 f481      	BRNE _0x22
                 ; 0000 00AB                     if(temperature < 25)
                +
000194 3109     +CPI R16 , LOW ( 25 )
000195 e0e0     +LDI R30 , HIGH ( 25 )
000196 071e     +CPC R17 , R30
                 	__CPWRN 16,17,25
000197 f41c      	BRGE _0x23
                 ; 0000 00AC                         cooler_state = 0;
000198 e0e0      	LDI  R30,LOW(0)
000199 83ea      	STD  Y+2,R30
00019a 83eb      	STD  Y+2+1,R30
                 ; 0000 00AD                     if(temperature > 40)
                 _0x23:
                +
00019b 3209     +CPI R16 , LOW ( 41 )
00019c e0e0     +LDI R30 , HIGH ( 41 )
00019d 071e     +CPC R17 , R30
                 	__CPWRN 16,17,41
00019e f024      	BRLT _0x24
                 ; 0000 00AE                         cooler_state = 2;
00019f e0e2      	LDI  R30,LOW(2)
0001a0 e0f0      	LDI  R31,HIGH(2)
0001a1 83ea      	STD  Y+2,R30
0001a2 83fb      	STD  Y+2+1,R31
                 ; 0000 00AF                     break;
                 _0x24:
0001a3 c021      	RJMP _0x1F
                 ; 0000 00B0                 case(2):
                 _0x22:
0001a4 30e2      	CPI  R30,LOW(0x2)
0001a5 e0a0      	LDI  R26,HIGH(0x2)
0001a6 07fa      	CPC  R31,R26
0001a7 f489      	BRNE _0x25
                 ; 0000 00B1                     if(temperature < 35)
                +
0001a8 3203     +CPI R16 , LOW ( 35 )
0001a9 e0e0     +LDI R30 , HIGH ( 35 )
0001aa 071e     +CPC R17 , R30
                 	__CPWRN 16,17,35
0001ab f424      	BRGE _0x26
                 ; 0000 00B2                         cooler_state = 1;
0001ac e0e1      	LDI  R30,LOW(1)
0001ad e0f0      	LDI  R31,HIGH(1)
0001ae 83ea      	STD  Y+2,R30
0001af 83fb      	STD  Y+2+1,R31
                 ; 0000 00B3                     if(temperature > 45)
                 _0x26:
                +
0001b0 320e     +CPI R16 , LOW ( 46 )
0001b1 e0e0     +LDI R30 , HIGH ( 46 )
0001b2 071e     +CPC R17 , R30
                 	__CPWRN 16,17,46
0001b3 f024      	BRLT _0x27
                 ; 0000 00B4                         cooler_state = 3;
0001b4 e0e3      	LDI  R30,LOW(3)
0001b5 e0f0      	LDI  R31,HIGH(3)
0001b6 83ea      	STD  Y+2,R30
0001b7 83fb      	STD  Y+2+1,R31
                 ; 0000 00B5                     break;
                 _0x27:
0001b8 c00c      	RJMP _0x1F
                 ; 0000 00B6                 case(3):
                 _0x25:
0001b9 30e3      	CPI  R30,LOW(0x3)
0001ba e0a0      	LDI  R26,HIGH(0x3)
0001bb 07fa      	CPC  R31,R26
0001bc f441      	BRNE _0x1F
                 ; 0000 00B7                     if(temperature < 40)
                +
0001bd 3208     +CPI R16 , LOW ( 40 )
0001be e0e0     +LDI R30 , HIGH ( 40 )
0001bf 071e     +CPC R17 , R30
                 	__CPWRN 16,17,40
0001c0 f424      	BRGE _0x29
                 ; 0000 00B8                         cooler_state = 2;
0001c1 e0e2      	LDI  R30,LOW(2)
0001c2 e0f0      	LDI  R31,HIGH(2)
0001c3 83ea      	STD  Y+2,R30
0001c4 83fb      	STD  Y+2+1,R31
                 ; 0000 00B9                     break;
                 _0x29:
                 ; 0000 00BA             }
                 _0x1F:
                 ; 0000 00BB 
                 ; 0000 00BC             cooler_rotational_speed(cooler_state);
0001c5 81aa      	LDD  R26,Y+2
0001c6 81bb      	LDD  R27,Y+2+1
0001c7 defd      	RCALL _cooler_rotational_speed
                 ; 0000 00BD         }
                 ; 0000 00BE 
                 ; 0000 00BF         if(heater){
                 _0x1C:
0001c8 3040      	CPI  R20,0
0001c9 f071      	BREQ _0x2A
                 ; 0000 00C0             DDRD = 0xF0;
0001ca efe0      	LDI  R30,LOW(240)
0001cb bbe1      	OUT  0x11,R30
                 ; 0000 00C1             PORTD = 0x90;
0001cc e9e0      	LDI  R30,LOW(144)
0001cd 940e 0274 	CALL SUBOPT_0x3
                 ; 0000 00C2             delay_ms(period);
                 ; 0000 00C3             PORTD = 0xC0;
0001cf ece0      	LDI  R30,LOW(192)
0001d0 940e 0274 	CALL SUBOPT_0x3
                 ; 0000 00C4             delay_ms(period);
                 ; 0000 00C5             PORTD = 0x60;
0001d2 e6e0      	LDI  R30,LOW(96)
0001d3 940e 0274 	CALL SUBOPT_0x3
                 ; 0000 00C6             delay_ms(period);
                 ; 0000 00C7             PORTD = 0x30;
0001d5 e3e0      	LDI  R30,LOW(48)
0001d6 940e 0274 	CALL SUBOPT_0x3
                 ; 0000 00C8             delay_ms(period);
                 ; 0000 00C9         }
                 ; 0000 00CA     }
                 _0x2A:
0001d8 cf4d      	RJMP _0xD
                 ; 0000 00CB }
                 _0x2B:
0001d9 cfff      	RJMP _0x2B
                 ; .FEND
                 
                 	.DSEG
                 _0xC:
000260           	.BYTE 0x24
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001da 93aa      	ST   -Y,R26
0001db b3e5      	IN   R30,0x15
0001dc 70ef      	ANDI R30,LOW(0xF)
0001dd 2fae      	MOV  R26,R30
0001de 81e8      	LD   R30,Y
0001df 7fe0      	ANDI R30,LOW(0xF0)
0001e0 2bea      	OR   R30,R26
0001e1 bbe5      	OUT  0x15,R30
                +
0001e2 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001e3 958a     +DEC R24
0001e4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001e5 9aaa      	SBI  0x15,2
                +
0001e6 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001e7 958a     +DEC R24
0001e8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001e9 98aa      	CBI  0x15,2
                +
0001ea e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001eb 958a     +DEC R24
0001ec f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001ed c077      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001ee 93aa      	ST   -Y,R26
0001ef 81a8      	LD   R26,Y
0001f0 dfe9      	RCALL __lcd_write_nibble_G100
0001f1 81e8          ld    r30,y
0001f2 95e2          swap  r30
0001f3 83e8          st    y,r30
0001f4 81a8      	LD   R26,Y
0001f5 dfe4      	RCALL __lcd_write_nibble_G100
                +
0001f6 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001f7 958a     +DEC R24
0001f8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001f9 c06b      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001fa 93aa      	ST   -Y,R26
0001fb 81e8      	LD   R30,Y
0001fc e0f0      	LDI  R31,0
0001fd 57ec      	SUBI R30,LOW(-__base_y_G100)
0001fe 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0001ff 81e0      	LD   R30,Z
000200 81a9      	LDD  R26,Y+1
000201 0fae      	ADD  R26,R30
000202 dfeb      	RCALL __lcd_write_data
000203 8059      	LDD  R5,Y+1
000204 8048      	LDD  R4,Y+0
                 _0x2080002:
000205 9622      	ADIW R28,2
000206 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000207 e0a2      	LDI  R26,LOW(2)
000208 940e 0279 	CALL SUBOPT_0x4
00020a e0ac      	LDI  R26,LOW(12)
00020b dfe2      	RCALL __lcd_write_data
00020c e0a1      	LDI  R26,LOW(1)
00020d 940e 0279 	CALL SUBOPT_0x4
00020f e0e0      	LDI  R30,LOW(0)
000210 2e4e      	MOV  R4,R30
000211 2e5e      	MOV  R5,R30
000212 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000213 93aa      	ST   -Y,R26
000214 81a8      	LD   R26,Y
000215 30aa      	CPI  R26,LOW(0xA)
000216 f011      	BREQ _0x2000005
000217 1457      	CP   R5,R7
000218 f048      	BRLO _0x2000004
                 _0x2000005:
000219 e0e0      	LDI  R30,LOW(0)
00021a 93ea      	ST   -Y,R30
00021b 9443      	INC  R4
00021c 2da4      	MOV  R26,R4
00021d dfdc      	RCALL _lcd_gotoxy
00021e 81a8      	LD   R26,Y
00021f 30aa      	CPI  R26,LOW(0xA)
000220 f409      	BRNE _0x2000007
000221 c043      	RJMP _0x2080001
                 _0x2000007:
                 _0x2000004:
000222 9453      	INC  R5
000223 9aa8      	SBI  0x15,0
000224 81a8      	LD   R26,Y
000225 dfc8      	RCALL __lcd_write_data
000226 98a8      	CBI  0x15,0
000227 c03d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000228 93ba      	ST   -Y,R27
000229 93aa      	ST   -Y,R26
00022a 931a      	ST   -Y,R17
                 _0x2000008:
00022b 81a9      	LDD  R26,Y+1
00022c 81ba      	LDD  R27,Y+1+1
00022d 91ed      	LD   R30,X+
00022e 83a9      	STD  Y+1,R26
00022f 83ba      	STD  Y+1+1,R27
000230 2f1e      	MOV  R17,R30
000231 30e0      	CPI  R30,0
000232 f019      	BREQ _0x200000A
000233 2fa1      	MOV  R26,R17
000234 dfde      	RCALL _lcd_putchar
000235 cff5      	RJMP _0x2000008
                 _0x200000A:
000236 8118      	LDD  R17,Y+0
000237 9623      	ADIW R28,3
000238 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000239 93aa      	ST   -Y,R26
00023a b3e4      	IN   R30,0x14
00023b 6fe0      	ORI  R30,LOW(0xF0)
00023c bbe4      	OUT  0x14,R30
00023d 9aa2      	SBI  0x14,2
00023e 9aa0      	SBI  0x14,0
00023f 9aa1      	SBI  0x14,1
000240 98aa      	CBI  0x15,2
000241 98a8      	CBI  0x15,0
000242 98a9      	CBI  0x15,1
000243 8078      	LDD  R7,Y+0
000244 81e8      	LD   R30,Y
000245 58e0      	SUBI R30,-LOW(128)
                +
000246 93e0 0286+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000248 81e8      	LD   R30,Y
000249 54e0      	SUBI R30,-LOW(192)
                +
00024a 93e0 0287+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00024c e1a4      	LDI  R26,LOW(20)
00024d e0b0      	LDI  R27,0
00024e 940e 0287 	CALL _delay_ms
000250 940e 027f 	CALL SUBOPT_0x5
000252 940e 027f 	CALL SUBOPT_0x5
000254 940e 027f 	CALL SUBOPT_0x5
000256 e2a0      	LDI  R26,LOW(32)
000257 df82      	RCALL __lcd_write_nibble_G100
                +
000258 ec88     +LDI R24 , LOW ( 200 )
000259 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00025a 9701     +SBIW R24 , 1
00025b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00025c e2a8      	LDI  R26,LOW(40)
00025d df90      	RCALL __lcd_write_data
00025e e0a4      	LDI  R26,LOW(4)
00025f df8e      	RCALL __lcd_write_data
000260 e8a5      	LDI  R26,LOW(133)
000261 df8c      	RCALL __lcd_write_data
000262 e0a6      	LDI  R26,LOW(6)
000263 df8a      	RCALL __lcd_write_data
000264 dfa2      	RCALL _lcd_clear
                 _0x2080001:
000265 9621      	ADIW R28,1
000266 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G100:
000284           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x0:
000267 bbe2      	OUT  0x12,R30
000268 01d8      	MOVW R26,R16
000269 940c 0287 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
00026b e0e3      	LDI  R30,LOW(3)
00026c 93ea      	ST   -Y,R30
00026d e0a0      	LDI  R26,LOW(0)
00026e 940c 01fa 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000270 93ea      	ST   -Y,R30
000271 e0a1      	LDI  R26,LOW(1)
000272 940c 01fa 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
000274 bbe2      	OUT  0x12,R30
000275 81a8      	LD   R26,Y
000276 81b9      	LDD  R27,Y+1
000277 940c 0287 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000279 940e 01ee 	CALL __lcd_write_data
00027b e0a3      	LDI  R26,LOW(3)
00027c e0b0      	LDI  R27,0
00027d 940c 0287 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
00027f e3a0      	LDI  R26,LOW(48)
000280 940e 01da 	CALL __lcd_write_nibble_G100
                +
000282 ec88     +LDI R24 , LOW ( 200 )
000283 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000284 9701     +SBIW R24 , 1
000285 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000286 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000287 9610      	adiw r26,0
000288 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000289 ed80     +LDI R24 , LOW ( 0x7D0 )
00028a e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00028b 9701     +SBIW R24 , 1
00028c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00028d 95a8      	wdr
00028e 9711      	sbiw r26,1
00028f f7c9      	brne __delay_ms0
                 __delay_ms1:
000290 9508      	ret
                 
                 __ROUND_REPACK:
000291 2355      	TST  R21
000292 f442      	BRPL __REPACK
000293 3850      	CPI  R21,0x80
000294 f411      	BRNE __ROUND_REPACK0
000295 ffe0      	SBRS R30,0
000296 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000297 9631      	ADIW R30,1
000298 1f69      	ADC  R22,R25
000299 1f79      	ADC  R23,R25
00029a f06b      	BRVS __REPACK1
                 
                 __REPACK:
00029b e850      	LDI  R21,0x80
00029c 2757      	EOR  R21,R23
00029d f411      	BRNE __REPACK0
00029e 935f      	PUSH R21
00029f c073      	RJMP __ZERORES
                 __REPACK0:
0002a0 3f5f      	CPI  R21,0xFF
0002a1 f031      	BREQ __REPACK1
0002a2 0f66      	LSL  R22
0002a3 0c00      	LSL  R0
0002a4 9557      	ROR  R21
0002a5 9567      	ROR  R22
0002a6 2f75      	MOV  R23,R21
0002a7 9508      	RET
                 __REPACK1:
0002a8 935f      	PUSH R21
0002a9 2000      	TST  R0
0002aa f00a      	BRMI __REPACK2
0002ab c073      	RJMP __MAXRES
                 __REPACK2:
0002ac c06c      	RJMP __MINRES
                 
                 __UNPACK:
0002ad e850      	LDI  R21,0x80
0002ae 2e19      	MOV  R1,R25
0002af 2215      	AND  R1,R21
0002b0 0f88      	LSL  R24
0002b1 1f99      	ROL  R25
0002b2 2795      	EOR  R25,R21
0002b3 0f55      	LSL  R21
0002b4 9587      	ROR  R24
                 
                 __UNPACK1:
0002b5 e850      	LDI  R21,0x80
0002b6 2e07      	MOV  R0,R23
0002b7 2205      	AND  R0,R21
0002b8 0f66      	LSL  R22
0002b9 1f77      	ROL  R23
0002ba 2775      	EOR  R23,R21
0002bb 0f55      	LSL  R21
0002bc 9567      	ROR  R22
0002bd 9508      	RET
                 
                 __CFD1U:
0002be 9468      	SET
0002bf c001      	RJMP __CFD1U0
                 __CFD1:
0002c0 94e8      	CLT
                 __CFD1U0:
0002c1 935f      	PUSH R21
0002c2 dff2      	RCALL __UNPACK1
0002c3 3870      	CPI  R23,0x80
0002c4 f018      	BRLO __CFD10
0002c5 3f7f      	CPI  R23,0xFF
0002c6 f408      	BRCC __CFD10
0002c7 c04b      	RJMP __ZERORES
                 __CFD10:
0002c8 e156      	LDI  R21,22
0002c9 1b57      	SUB  R21,R23
0002ca f4aa      	BRPL __CFD11
0002cb 9551      	NEG  R21
0002cc 3058      	CPI  R21,8
0002cd f40e      	BRTC __CFD19
0002ce 3059      	CPI  R21,9
                 __CFD19:
0002cf f030      	BRLO __CFD17
0002d0 efef      	SER  R30
0002d1 efff      	SER  R31
0002d2 ef6f      	SER  R22
0002d3 e77f      	LDI  R23,0x7F
0002d4 f977      	BLD  R23,7
0002d5 c01a      	RJMP __CFD15
                 __CFD17:
0002d6 2777      	CLR  R23
0002d7 2355      	TST  R21
0002d8 f0b9      	BREQ __CFD15
                 __CFD18:
0002d9 0fee      	LSL  R30
0002da 1fff      	ROL  R31
0002db 1f66      	ROL  R22
0002dc 1f77      	ROL  R23
0002dd 955a      	DEC  R21
0002de f7d1      	BRNE __CFD18
0002df c010      	RJMP __CFD15
                 __CFD11:
0002e0 2777      	CLR  R23
                 __CFD12:
0002e1 3058      	CPI  R21,8
0002e2 f028      	BRLO __CFD13
0002e3 2fef      	MOV  R30,R31
0002e4 2ff6      	MOV  R31,R22
0002e5 2f67      	MOV  R22,R23
0002e6 5058      	SUBI R21,8
0002e7 cff9      	RJMP __CFD12
                 __CFD13:
0002e8 2355      	TST  R21
0002e9 f031      	BREQ __CFD15
                 __CFD14:
0002ea 9576      	LSR  R23
0002eb 9567      	ROR  R22
0002ec 95f7      	ROR  R31
0002ed 95e7      	ROR  R30
0002ee 955a      	DEC  R21
0002ef f7d1      	BRNE __CFD14
                 __CFD15:
0002f0 2000      	TST  R0
0002f1 f40a      	BRPL __CFD16
0002f2 d084      	RCALL __ANEGD1
                 __CFD16:
0002f3 915f      	POP  R21
0002f4 9508      	RET
                 
                 __CDF1U:
0002f5 9468      	SET
0002f6 c001      	RJMP __CDF1U0
                 __CDF1:
0002f7 94e8      	CLT
                 __CDF1U0:
0002f8 9730      	SBIW R30,0
0002f9 4060      	SBCI R22,0
0002fa 4070      	SBCI R23,0
0002fb f0b1      	BREQ __CDF10
0002fc 2400      	CLR  R0
0002fd f026      	BRTS __CDF11
0002fe 2377      	TST  R23
0002ff f412      	BRPL __CDF11
000300 9400      	COM  R0
000301 d075      	RCALL __ANEGD1
                 __CDF11:
000302 2e17      	MOV  R1,R23
000303 e17e      	LDI  R23,30
000304 2011      	TST  R1
                 __CDF12:
000305 f032      	BRMI __CDF13
000306 957a      	DEC  R23
000307 0fee      	LSL  R30
000308 1fff      	ROL  R31
000309 1f66      	ROL  R22
00030a 1c11      	ROL  R1
00030b cff9      	RJMP __CDF12
                 __CDF13:
00030c 2fef      	MOV  R30,R31
00030d 2ff6      	MOV  R31,R22
00030e 2d61      	MOV  R22,R1
00030f 935f      	PUSH R21
000310 df8a      	RCALL __REPACK
000311 915f      	POP  R21
                 __CDF10:
000312 9508      	RET
                 
                 __ZERORES:
000313 27ee      	CLR  R30
000314 27ff      	CLR  R31
000315 2766      	CLR  R22
000316 2777      	CLR  R23
000317 915f      	POP  R21
000318 9508      	RET
                 
                 __MINRES:
000319 efef      	SER  R30
00031a efff      	SER  R31
00031b e76f      	LDI  R22,0x7F
00031c ef7f      	SER  R23
00031d 915f      	POP  R21
00031e 9508      	RET
                 
                 __MAXRES:
00031f efef      	SER  R30
000320 efff      	SER  R31
000321 e76f      	LDI  R22,0x7F
000322 e77f      	LDI  R23,0x7F
000323 915f      	POP  R21
000324 9508      	RET
                 
                 __MULF12:
000325 935f      	PUSH R21
000326 df86      	RCALL __UNPACK
000327 3870      	CPI  R23,0x80
000328 f351      	BREQ __ZERORES
000329 3890      	CPI  R25,0x80
00032a f341      	BREQ __ZERORES
00032b 2401      	EOR  R0,R1
00032c 9408      	SEC
00032d 1f79      	ADC  R23,R25
00032e f423      	BRVC __MULF124
00032f f31c      	BRLT __ZERORES
                 __MULF125:
000330 2000      	TST  R0
000331 f33a      	BRMI __MINRES
000332 cfec      	RJMP __MAXRES
                 __MULF124:
000333 920f      	PUSH R0
000334 931f      	PUSH R17
000335 932f      	PUSH R18
000336 933f      	PUSH R19
000337 934f      	PUSH R20
000338 2711      	CLR  R17
000339 2722      	CLR  R18
00033a 2799      	CLR  R25
00033b 9f68      	MUL  R22,R24
00033c 01a0      	MOVW R20,R0
00033d 9f8f      	MUL  R24,R31
00033e 2d30      	MOV  R19,R0
00033f 0d41      	ADD  R20,R1
000340 1f59      	ADC  R21,R25
000341 9f6b      	MUL  R22,R27
000342 0d30      	ADD  R19,R0
000343 1d41      	ADC  R20,R1
000344 1f59      	ADC  R21,R25
000345 9f8e      	MUL  R24,R30
000346 d027      	RCALL __MULF126
000347 9fbf      	MUL  R27,R31
000348 d025      	RCALL __MULF126
000349 9f6a      	MUL  R22,R26
00034a d023      	RCALL __MULF126
00034b 9fbe      	MUL  R27,R30
00034c d01d      	RCALL __MULF127
00034d 9faf      	MUL  R26,R31
00034e d01b      	RCALL __MULF127
00034f 9fae      	MUL  R26,R30
000350 0d11      	ADD  R17,R1
000351 1f29      	ADC  R18,R25
000352 1f39      	ADC  R19,R25
000353 1f49      	ADC  R20,R25
000354 1f59      	ADC  R21,R25
000355 2fe3      	MOV  R30,R19
000356 2ff4      	MOV  R31,R20
000357 2f65      	MOV  R22,R21
000358 2f52      	MOV  R21,R18
000359 914f      	POP  R20
00035a 913f      	POP  R19
00035b 912f      	POP  R18
00035c 911f      	POP  R17
00035d 900f      	POP  R0
00035e 2366      	TST  R22
00035f f02a      	BRMI __MULF122
000360 0f55      	LSL  R21
000361 1fee      	ROL  R30
000362 1fff      	ROL  R31
000363 1f66      	ROL  R22
000364 c002      	RJMP __MULF123
                 __MULF122:
000365 9573      	INC  R23
000366 f24b      	BRVS __MULF125
                 __MULF123:
000367 df29      	RCALL __ROUND_REPACK
000368 915f      	POP  R21
000369 9508      	RET
                 
                 __MULF127:
00036a 0d10      	ADD  R17,R0
00036b 1d21      	ADC  R18,R1
00036c 1f39      	ADC  R19,R25
00036d c002      	RJMP __MULF128
                 __MULF126:
00036e 0d20      	ADD  R18,R0
00036f 1d31      	ADC  R19,R1
                 __MULF128:
000370 1f49      	ADC  R20,R25
000371 1f59      	ADC  R21,R25
000372 9508      	RET
                 
                 __ANEGW1:
000373 95f1      	NEG  R31
000374 95e1      	NEG  R30
000375 40f0      	SBCI R31,0
000376 9508      	RET
                 
                 __ANEGD1:
000377 95f0      	COM  R31
000378 9560      	COM  R22
000379 9570      	COM  R23
00037a 95e1      	NEG  R30
00037b 4fff      	SBCI R31,-1
00037c 4f6f      	SBCI R22,-1
00037d 4f7f      	SBCI R23,-1
00037e 9508      	RET
                 
                 __CWD1:
00037f 2f6f      	MOV  R22,R31
000380 0f66      	ADD  R22,R22
000381 0b66      	SBC  R22,R22
000382 2f76      	MOV  R23,R22
000383 9508      	RET
                 
                 __DIVW21U:
000384 2400      	CLR  R0
000385 2411      	CLR  R1
000386 e190      	LDI  R25,16
                 __DIVW21U1:
000387 0faa      	LSL  R26
000388 1fbb      	ROL  R27
000389 1c00      	ROL  R0
00038a 1c11      	ROL  R1
00038b 1a0e      	SUB  R0,R30
00038c 0a1f      	SBC  R1,R31
00038d f418      	BRCC __DIVW21U2
00038e 0e0e      	ADD  R0,R30
00038f 1e1f      	ADC  R1,R31
000390 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000391 60a1      	SBR  R26,1
                 __DIVW21U3:
000392 959a      	DEC  R25
000393 f799      	BRNE __DIVW21U1
000394 01fd      	MOVW R30,R26
000395 01d0      	MOVW R26,R0
000396 9508      	RET
                 
                 __DIVW21:
000397 d012      	RCALL __CHKSIGNW
000398 dfeb      	RCALL __DIVW21U
000399 f40e      	BRTC __DIVW211
00039a dfd8      	RCALL __ANEGW1
                 __DIVW211:
00039b 9508      	RET
                 
                 __MODW21:
00039c 94e8      	CLT
00039d ffb7      	SBRS R27,7
00039e c004      	RJMP __MODW211
00039f 95a0      	COM  R26
0003a0 95b0      	COM  R27
0003a1 9611      	ADIW R26,1
0003a2 9468      	SET
                 __MODW211:
0003a3 fdf7      	SBRC R31,7
0003a4 dfce      	RCALL __ANEGW1
0003a5 dfde      	RCALL __DIVW21U
0003a6 01fd      	MOVW R30,R26
0003a7 f40e      	BRTC __MODW212
0003a8 dfca      	RCALL __ANEGW1
                 __MODW212:
0003a9 9508      	RET
                 
                 __CHKSIGNW:
0003aa 94e8      	CLT
0003ab fff7      	SBRS R31,7
0003ac c002      	RJMP __CHKSW1
0003ad dfc5      	RCALL __ANEGW1
0003ae 9468      	SET
                 __CHKSW1:
0003af ffb7      	SBRS R27,7
0003b0 c006      	RJMP __CHKSW2
0003b1 95a0      	COM  R26
0003b2 95b0      	COM  R27
0003b3 9611      	ADIW R26,1
0003b4 f800      	BLD  R0,0
0003b5 9403      	INC  R0
0003b6 fa00      	BST  R0,0
                 __CHKSW2:
0003b7 9508      	RET
                 
                 __SAVELOCR4:
0003b8 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003b9 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003ba 931a      	ST   -Y,R17
0003bb 930a      	ST   -Y,R16
0003bc 9508      	RET
                 
                 __LOADLOCR4:
0003bd 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003be 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003bf 8119      	LDD  R17,Y+1
0003c0 8108      	LD   R16,Y
0003c1 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  28 r1 :  17 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  24 r17:  28 r18:  18 r19:  19 r20:  17 r21:  51 r22:  33 r23:  30 
r24:  29 r25:  25 r26:  89 r27:  30 r28:   7 r29:   1 r30: 170 r31:  57 
x  :   4 y  :  86 z  :   8 
Registers used: 24 out of 35 (68.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  16 add   :   8 
adiw  :   9 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  11 
brge  :   5 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 
brlt  :   6 brmi  :   4 brne  :  28 brpl  :   4 brsh  :   0 brtc  :   3 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  :  36 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  14 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   8 
cp    :   3 cpc   :  18 cpi   :  30 cpse  :   0 dec   :  10 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   4 jmp   :  27 ld    :  16 ldd   :  25 ldi   : 163 
lds   :   0 lpm   :   7 lsl   :  10 lsr   :   1 mov   :  29 movw  :  12 
mul   :   9 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   2 out   :  18 pop   :  11 push  :  10 rcall :  47 ret   :  26 
reti  :   0 rjmp  :  41 rol   :  14 ror   :   7 sbc   :   2 sbci  :   7 
sbi   :   8 sbic  :   0 sbis  :   1 sbiw  :  10 sbr   :   1 sbrc  :   1 
sbrs  :   4 sec   :   1 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  33 std   :  17 sts   :   2 sub   :   2 subi  :   6 swap  :   1 
tst   :   9 wdr   :   1 
Instructions used: 72 out of 116 (62.1%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000784   1830     94   1924   32768   5.9%
[.dseg] 0x000060 0x000288      0     40     40    2048   2.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
